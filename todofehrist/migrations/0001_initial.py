# Generated by Django 3.2.6 on 2021-08-23 07:06

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AppUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_email_verified', models.BooleanField(default=False)),
                ('updated_datetime', models.DateTimeField(null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'AppUser',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=300)),
                ('due_datetime', models.DateTimeField()),
                ('completion_status', models.BooleanField(default=False)),
                ('completion_datetime', models.DateTimeField()),
                ('files_count', models.IntegerField()),
                ('created_datetime', models.DateTimeField()),
                ('updated_datetime', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserSubscriptionType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('price', models.IntegerField(default=0)),
                ('currency', models.CharField(default='USD', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='UserSubscriptionLimits',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_allowed_tasks', models.IntegerField()),
                ('max_allowed_files', models.IntegerField()),
                ('allowed_files_per_task', models.IntegerField()),
                ('max_file_size', models.IntegerField()),
                ('max_downloads_per_day', models.IntegerField()),
                ('max_uploads_per_day', models.IntegerField()),
                ('permanent_deletion_time', models.IntegerField()),
                ('user_subscription_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='todofehrist.usersubscriptiontype')),
            ],
        ),
        migrations.CreateModel(
            name='UserQuotaManagement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_tasks', models.IntegerField()),
                ('downloaded_file_count', models.IntegerField()),
                ('last_downloaded_datetime', models.DateTimeField()),
                ('uploaded_files_count', models.IntegerField()),
                ('last_uploaded_datetime', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TaskMediaFiles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('file', models.FileField(upload_to='')),
                ('uploaded_datetime', models.DateTimeField()),
                ('last_accessed_datetime', models.DateTimeField()),
                ('is_deleted', models.BooleanField(default=False)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='todofehrist.task')),
            ],
        ),
        migrations.AddField(
            model_name='appuser',
            name='user_subscription_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='todofehrist.usersubscriptiontype'),
        ),
    ]
