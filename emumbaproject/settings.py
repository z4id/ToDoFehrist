"""
Django settings for emumbaproject project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
from pathlib import Path

from EnvConfigurator import EnvVar, EnvParser

# Define Environment Variable - name, var_type, choices, optional, default values for each
env_config = [
        EnvVar("LOG_FILE", str, optional=True, default='todofehrist_api.log'),
        EnvVar("LOG_LEVEL", str, choices=["INFO", "DEBUG", "WARNING", "ERROR"]),
        EnvVar("ALLOWED_HOSTS", list, separator=","),
        EnvVar("DEBUG", bool),
        EnvVar("SECRET_KEY", str),
        EnvVar("DB_HOST", str),
        EnvVar("DB_NAME", str),
        EnvVar("DB_USER", str),
        EnvVar("DB_PASSWORD", str),
        EnvVar("DB_PORT", int),
        EnvVar("DB_TEST_NAME", str, optional=True, default="testdb_todofehrist"),
        EnvVar("EMAIL_HOST", str),
        EnvVar("EMAIL_HOST_USER", str),
        EnvVar("EMAIL_HOST_PASSWORD", str),
        EnvVar("EMAIL_PORT", int),
        EnvVar("GOOGLE_OAUTH_CLIENT_ID", str),
        EnvVar("BROKER_URL", str),
    ]

# Get Env Values as class objects
env_parser = EnvParser(env_config).all

# Get Logging Variable via Environment Variable
LOG_FILE = env_parser.LOG_FILE
LOG_LEVEL = env_parser.LOG_LEVEL

# Logging Configuration
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "root": {"level": LOG_LEVEL, "handlers": ["file"]},
    "handlers": {
        "file": {
            "level": LOG_LEVEL,
            "class": "logging.FileHandler",
            "filename": LOG_FILE,
            "formatter": "app",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file"],
            "level": "INFO",
            "propagate": True
        },
    },
    "formatters": {
        "app": {
            "format": (
                "%(asctime)s [%(levelname)-8s] "
                "(%(module)s.%(funcName)s) %(message)s"
            ),
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
}

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env_parser.SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env_parser.DEBUG
ALLOWED_HOSTS = env_parser.ALLOWED_HOSTS

# Application definition
MY_APPS = [
    'rest_framework',
    'drf_yasg',
    'todofehrist',
]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]
INSTALLED_APPS.extend(MY_APPS)

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'emumbaproject.middleware.LoggingRequestResponse',
]

ROOT_URLCONF = 'emumbaproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'emumbaproject.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
DATABASES = {
    'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'HOST': env_parser.DB_HOST,
            'NAME': env_parser.DB_NAME,
            'USER': env_parser.DB_USER,
            'PASSWORD': env_parser.DB_PASSWORD,
            'PORT': env_parser.DB_PORT,
            'TEST': {
                'NAME': env_parser.DB_TEST_NAME
            }
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

AUTH_USER_MODEL = 'todofehrist.User'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# EMail settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = env_parser.EMAIL_HOST
EMAIL_HOST_USER = env_parser.EMAIL_HOST_USER
EMAIL_HOST_PASSWORD = env_parser.EMAIL_HOST_PASSWORD
EMAIL_PORT = env_parser.EMAIL_PORT
EMAIL_USE_TLS = True

LOGIN_TOKEN_EXPIRY_TIME = 3600  # seconds
REPORT_CACHE_TIME = 15*60  # seconds, 15 minutes

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "mediafiles"

CELERY_TIMEZONE = 'UTC'
BROKER_URL = env_parser.BROKER_URL

GOOGLE_OAUTH_CLIENT_ID = env_parser.GOOGLE_OAUTH_CLIENT_ID

Serializer_DateTime_FORMATS = ['%Y-%m-%dT%H:%M:%S.%fZ']
