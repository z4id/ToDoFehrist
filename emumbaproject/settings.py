"""
Django settings for emumbaproject project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import enum
import logging
from pathlib import Path
from django.core.management.utils import get_random_secret_key
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', None)
ENVIRONMENT_STAGE = os.environ.get('ENV', None)


class EnvironmentStages(enum.Enum):
    DEV = "DEV"
    QA = "QA"
    UAT = "UAT"
    PROD = "PROD"

    @classmethod
    def get_all_env_stage_names(cls):
        return cls.__members__

    @classmethod
    def has_stage_name(cls, stage_name):
        return stage_name in cls.__members__


if not (ENVIRONMENT_STAGE and EnvironmentStages.has_stage_name(ENVIRONMENT_STAGE)):
    raise Exception("ENVIRONMENT not set properly. Check your Environment Variable 'ENV'. "
                    "Possible 'ENV' Stages: {0}".format(" or ".join(EnvironmentStages.get_all_env_stage_names())))

if ENVIRONMENT_STAGE == EnvironmentStages.DEV.value:
    SECRET_KEY = get_random_secret_key() if not SECRET_KEY else SECRET_KEY
elif not SECRET_KEY:
    raise Exception("SECRET_KEY is not set in settings.py. Check your Environment Variable 'SECRET_KEY'")

DEBUG_PROPAGATE_EXCEPTIONS = False

# SECURITY WARNING: don't run with debug turned on in production!
if ENVIRONMENT_STAGE == EnvironmentStages.DEV.value:
    DEBUG = True
    ALLOWED_HOSTS = ['*']
else:
    DEBUG = False
    ALLOWED_HOSTS = ['127.0.0.1', 'localhost']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'todofehrist'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'emumbaproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'emumbaproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

class SupportedDatabases(enum.Enum):
    sqlite = 'sqlite'
    postgresql = 'postgresql'

    @classmethod
    def has_db_key(cls, db_name):
        return db_name in cls.__members__

    @classmethod
    def get_all_db_names(cls):
        return cls.__members__


db_configs = dict()

DATABASE = os.environ.get('DATABASE', None)
if not (DATABASE and SupportedDatabases.has_db_key(DATABASE)):
    raise Exception("DATABASE is not set properly. Set Environment Variable 'DATABASE' "
                    "to {0}".format(' or '.join(SupportedDatabases.get_all_db_names())))

if DATABASE == SupportedDatabases.postgresql.value:
    DB_HOST = os.environ.get('DB_HOST', None)
    DB_NAME = os.environ.get('DB_NAME', None)
    DB_USER = os.environ.get('DB_USER', None)
    DB_PASSWORD = os.environ.get('DB_PASSWORD', None)
    DB_PORT = os.environ.get('DB_PORT', None)
    DB_TEST_NAME = os.environ.get('DB_TEST_NAME', 'TestdbToDoFehrist')

    if not DB_HOST or not DB_USER or not DB_NAME or not DB_PASSWORD or not DB_PORT:
        raise Exception("For PostgreSQL database selection, some Database Credentials are not set. "
                        "Check 'DB_HOST' or 'DB_NAME' or 'DB_USER' or DB_PASSWORD or 'DB_PORT'")

    postgresql_config = {
            'ENGINE': 'django.db.backends.postgresql',
            'HOST': DB_HOST,
            'NAME': DB_NAME,
            'USER': DB_USER,
            'PASSWORD': DB_PASSWORD,
            'PORT': DB_PORT,
            'TEST': {
                'NAME': DB_TEST_NAME
            }
    }

    db_configs[SupportedDatabases.postgresql.value] = postgresql_config

if DATABASE == SupportedDatabases.sqlite.value:

    sqlite_config = {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
    }

    db_configs[SupportedDatabases.sqlite.value] = sqlite_config

DATABASES = {
    'default': db_configs[DATABASE]
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'todofehrist.AppUser'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST', None)
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', None)
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', None)
EMAIL_PORT = os.environ.get('EMAIL_PORT', None)
EMAIL_USE_TLS = True

if not EMAIL_HOST or not EMAIL_HOST_USER or not EMAIL_HOST_PASSWORD or not EMAIL_PORT:
    exception_message = "EMAIL CREDENTIALS are not properly set."
    logging.exception(exception_message)
    raise Exception(exception_message)
